// Copyright 2020-2022 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#include <stdint.h>

#define __MPGX__

#define MPGX_VERSION_MAJOR @mpgx_VERSION_MAJOR@
#define MPGX_VERSION_MINOR @mpgx_VERSION_MINOR@
#define MPGX_VERSION_PATCH @mpgx_VERSION_PATCH@

#define MPGX_VERSION_STRING \
	"@mpgx_VERSION_MAJOR@." \
	"@mpgx_VERSION_MINOR@." \
	"@mpgx_VERSION_PATCH@"

/*
 * Supported Vulkan API functionality.
 */
#define MPGX_SUPPORT_VULKAN @MPGX_SUPPORT_VULKAN@
/*
 * Supported OpenGL functionality.
 */
#define MPGX_SUPPORT_OPENGL @MPGX_SUPPORT_OPENGL@

#if !MPGX_SUPPORT_VULKAN && !MPGX_SUPPORT_OPENGL
#error Not a single supported graphics backed
#endif

/*
 * Default MPGX array capacity.
 */
#define MPGX_DEFAULT_CAPACITY 4

/*
 * MPGX results.
 */
typedef enum MpgxResult_T
{
	SUCCESS_MPGX_RESULT = 0,
	FAILED_TO_INITIALIZE_MPGX_RESULT = 1,
	NOT_INITIALIZED_MPGX_RESULT = 2,
	ALREADY_INITIALIZED_MPGX_RESULT = 3,
	VULKAN_IS_NOT_SUPPORTED_MPGX_RESULT = 4,
	OPENGL_IS_NOT_SUPPORTED_MPGX_RESULT = 5,
	FORMAT_IS_NOT_SUPPORTED_MPGX_RESULT = 6,
	RAY_TRACING_IS_NOT_SUPPORTED_MPGX_RESULT = 7,
	BAD_VALUE_MPGX_RESULT = 8,
	BAD_SHADER_CODE_MPGX_RESULT = 9,
	OUT_OF_HOST_MEMORY_MPGX_RESULT = 10,
	OUT_OF_DEVICE_MEMORY_MPGX_RESULT = 11,
	OUT_OF_POOL_MEMORY_MPGX_RESULT = 12,
	FAILED_TO_MAP_MEMORY_MPGX_RESULT = 13,
	FAILED_TO_GET_FUNCTION_ADDRESS_MPGX_RESULT = 14,
	ZERO_FRAMEBUFFER_SIZE_MPGX_RESULT = 15,
	DEVICE_IS_LOST_MPGX_RESULT = 16,
	SURFACE_IS_LOST_MPGX_RESULT = 17,
	UNKNOWN_ERROR_MPGX_RESULT = 18,
	MPGX_RESULT_COUNT = 19,
} MpgxResult_T;
/*
 * MPGX result type.
 */
typedef uint8_t MpgxResult;

/*
 * MPGX result strings.
 */
static const char* const mpgxResultStrings[MPGX_RESULT_COUNT] = {
	"Success",
	"Failed to initialize",
	"Not initialized",
	"Already initialized",
	"Vulkan is not supported",
	"OpenGL is not supported",
	"Format is not supported",
	"Ray tracing is not supported",
	"Bad value",
	"Bad shader code",
	"Out of host memory",
	"Out of device memory",
	"Out of pool memory",
	"Failed to map memory",
	"Failed to get function address",
	"Zero framebuffer size",
	"Device is lost",
	"Surface is lost",
	"Unknown error",
};

/*
 * Returns MPGX result as string.
 * result - MPGX result.
 */
inline static const char* mpgxResultToString(
	MpgxResult result)
{
	if (result >= MPGX_RESULT_COUNT)
		return "Unknown MPGX result";
	return mpgxResultStrings[result];
}

/*
 * Graphics APIs.
 */
typedef enum GraphicsAPI_T
{
	VULKAN_GRAPHICS_API = 0,
	OPENGL_GRAPHICS_API = 1,
	OPENGL_ES_GRAPHICS_API = 2,
	GRAPHICS_API_COUNT = 3,
} GraphicsAPI_T;
/*
 * Graphics API type.
 */
typedef uint8_t GraphicsAPI;

/*
 * Graphics API strings.
 */
static const char* const graphicsApiStrings[MPGX_RESULT_COUNT] = {
	"Vulkan",
	"OpenGL",
	"OpenGLES",
};

/*
 * Returns graphics API as string.
 * api - graphics API.
 */
inline static const char* graphicsApiToString(
	GraphicsAPI api)
{
	if (api >= GRAPHICS_API_COUNT)
		return "Unknown";
	return graphicsApiStrings[api];
}
